{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth({\n  userAuth\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(userAuth);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  yield getSnapshotFromUserAuth(auth.signInWithPopup(googleProvider)); // try {\n  //   const { user } = yield auth.signInWithPopup(googleProvider);\n  //   const userRef = yield call(createUserProfileDocument, user);\n  //   const userSnapshot = yield userRef.get();\n  //   put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  // } catch (error) {\n  //   yield put(signInFailure(error));\n  // }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  yield getSnapshotFromUserAuth(auth.signInWithPopup(googleProvider));\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/Itai/Desktop/node-server/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","auth","googleProvider","createUserProfileDocument","getSnapshotFromUserAuth","userAuth","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","signInWithGoogle","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,QAIO,+BAJP;AAMA,OAAO,UAAUC,uBAAV,CAAkC;AAACC,EAAAA;AAAD,CAAlC,EAA8C;AACpD,MAAI;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAML,IAAI,CAACM,eAAL,CAAqBF,QAArB,CAAvB;AACA,UAAMG,OAAO,GAAG,MAAMX,IAAI,CAACM,yBAAD,EAA4BG,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACAf,IAAAA,GAAG,CAACI,aAAa,CAAC;AAAEY,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAH;AACD,GALF,CAKG,OAAOC,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACK,aAAa,CAACa,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,gBAAV,GAA6B;AACnC,QAAMV,uBAAuB,CAACH,IAAI,CAACM,eAAL,CAAqBL,cAArB,CAAD,CAA7B,CADmC,CAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAED,OAAO,UAAUa,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAClE,QAAMd,uBAAuB,CAACH,IAAI,CAACM,eAAL,CAAqBL,cAArB,CAAD,CAA7B;;AACC,MAAI;AACF,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAML,IAAI,CAACkB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMV,OAAO,GAAG,MAAMX,IAAI,CAACM,yBAAD,EAA4BG,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACAf,IAAAA,GAAG,CAACI,aAAa,CAAC;AAAEY,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAH;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACK,aAAa,CAACa,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUO,mBAAV,GAAgC;AACrC,QAAM1B,UAAU,CAACI,eAAe,CAACuB,oBAAjB,EAAuCP,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUQ,kBAAV,GAA+B;AACpC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,mBAAjB,EAAsCR,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUS,SAAV,GAAsB;AAC3B,QAAM5B,GAAG,CAAC,CAACC,IAAI,CAACuB,mBAAD,CAAL,EAA4BvB,IAAI,CAACyB,kBAAD,CAAhC,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nimport { signInSuccess, signInFailure } from './user.actions';\r\n\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserProfileDocument\r\n} from '../../firebase/firebase.utils';\r\n\r\nexport function* getSnapshotFromUserAuth({userAuth}) {\r\n\ttry {\r\n    const { user } = yield auth.signInWithPopup(userAuth);\r\n    const userRef = yield call(createUserProfileDocument, user);\r\n    const userSnapshot = yield userRef.get();\r\n    put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n\tyield getSnapshotFromUserAuth(auth.signInWithPopup(googleProvider));\r\n  // try {\r\n  //   const { user } = yield auth.signInWithPopup(googleProvider);\r\n  //   const userRef = yield call(createUserProfileDocument, user);\r\n  //   const userSnapshot = yield userRef.get();\r\n  //   put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  // } catch (error) {\r\n  //   yield put(signInFailure(error));\r\n  // }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n\tyield getSnapshotFromUserAuth(auth.signInWithPopup(googleProvider));\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    const userRef = yield call(createUserProfileDocument, user);\r\n    const userSnapshot = yield userRef.get();\r\n    put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}